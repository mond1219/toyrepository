# 프로그래머스 숫자 짝꿍
# https://school.programmers.co.kr/learn/courses/30/lessons/131128
def solution(X, Y):
    answer = [] 
    # set을 통해 둘의 교집합을 찾고 교집합의 개수를 가지고 최대 숫자를 만든다. 큰 숫자로 나열하면 될듯?
    intersection = set(list(X)) & set(list(Y))
    if len(intersection) == 0 :
        return '-1'
    for temp in intersection:
        xCnt = X.count(temp)
        yCnt = Y.count(temp)
        if xCnt <= yCnt:
            # x 개수만큼 answer에 담기
            cnt = xCnt
        else:
            cnt = yCnt
        for idx in range(0, cnt):
            answer.append(temp)
    if len(intersection) == 1 and intersection.pop() == '0':  # 0만 있으면 "0" 이거 하나만 보내기
        return "0"
    # answer에 짝꿍들을 다 담아줌
    answer.sort(reverse=True)
    
    return ''.join(answer)

# 바탕화면 정리 
# https://school.programmers.co.kr/learn/courses/30/lessons/161990
def solution(wallpaper):
    xList = []
    yList = []
    # 최대값은 파일의 크기가 1만큼 차지는 것으로 +1 해줘야한다. 
    for xidx, xrow in enumerate(wallpaper):
        for yidx, yrow in enumerate(xrow):
            if yrow =='#':
                xList.append(xidx)
                yList.append(yidx)
    xList.sort()
    yList.sort()
    if len(xList) == 1:
        x = xList.pop()
        y = yList.pop()
        return [x,y, x+1, y+1]

    return [xList.pop(0), yList.pop(0), xList.pop()+1, yList.pop()+1]
